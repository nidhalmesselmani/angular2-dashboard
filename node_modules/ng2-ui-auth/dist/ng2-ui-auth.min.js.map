{"version":3,"file":null,"sources":["../node_modules/rollup-plugin-typescript/src/typescript-helpers.js","../src/utils.ts","../src/local.ts","../src/auth.ts","../src/config.ts","../src/storage.ts","../src/shared.ts","../src/popup.ts","../src/oauth1.ts","../src/oauth2.ts","../src/oauth.ts","../src/jwtHttp.ts"],"sourcesContent":["export function __extends(d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nexport function __decorate(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n}\n\nexport function __metadata(k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n}\n\nexport function __param(paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n}\n\nexport function __awaiter(thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments)).next());\n    });\n}\n","/**\r\n * Created by Ron on 17/12/2015.\r\n */\r\n\r\nexport function extend<T, S>(dst: T, src: S): T & S {\r\n    Object.keys(src)\r\n        .forEach((key) => {\r\n            dst[key] = dst[key];\r\n        });\r\n    return <any>dst;\r\n}\r\n\r\nexport function joinUrl(baseUrl: string, url: string) {\r\n    if (/^(?:[a-z]+:)?\\/\\//i.test(url)) {\r\n        return url;\r\n    }\r\n\r\n    let joined = [baseUrl, url].join('/');\r\n\r\n    let normalize = function(str) {\r\n        return str\r\n            .replace(/[\\/]+/g, '/')\r\n            .replace(/\\/\\?/g, '?')\r\n            .replace(/\\/\\#/g, '#')\r\n            .replace(/\\:\\//g, '://');\r\n    };\r\n\r\n    return normalize(joined);\r\n}\r\n\r\nexport function merge(obj1, obj2) {\r\n    let result = {};\r\n    for (var i in obj1) {\r\n        if (obj1.hasOwnProperty(i)) {\r\n            if ((i in obj2) && (typeof obj1[i] === 'object') && (i !== null)) {\r\n                result[i] = merge(obj1[i], obj2[i]);\r\n            } else {\r\n                result[i] = obj1[i];\r\n            }\r\n        }\r\n    }\r\n    for (i in obj2) {\r\n        if (obj2.hasOwnProperty(i)) {\r\n            if (i in result) {\r\n                continue;\r\n            }\r\n            result[i] = obj2[i];\r\n        }\r\n\r\n    }\r\n    return result;\r\n}\r\n\r\nexport function camelCase(name) {\r\n    return name.replace(/([\\:\\-\\_]+(.))/g, function(_, separator, letter, offset) {\r\n        return offset ? letter.toUpperCase() : letter;\r\n    });\r\n}","import {Injectable} from '@angular/core';\r\nimport {Shared} from './shared';\r\nimport {Config} from './config';\r\nimport {Http, RequestOptionsArgs, Response} from '@angular/http';\r\nimport {joinUrl} from './utils';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport 'rxjs/add/operator/do';\r\n\r\n/**\r\n * Created by Ron on 17/12/2015.\r\n */\r\n\r\nfunction getFullOpts(user: string | Object, userOpts?: RequestOptionsArgs) {\r\n    const opts = userOpts || {};\r\n    if (user) {\r\n        opts.body = typeof user === 'string' ? user : JSON.stringify(user);\r\n    }\r\n    opts.method = opts.method || 'POST';\r\n    return opts;\r\n}\r\n\r\n@Injectable()\r\nexport class Local {\r\n    constructor(private http: Http,\r\n                private shared: Shared,\r\n                private config: Config) {}\r\n\r\n    login(user: string | Object, opts?: RequestOptionsArgs): Observable<Response> {\r\n        const fullOpts = getFullOpts(user, opts);\r\n        const url = fullOpts.url ? fullOpts.url : joinUrl(this.config.baseUrl, this.config.loginUrl);\r\n\r\n        return this.http.request(url, fullOpts)\r\n            .do((response: Response) => this.shared.setToken(response));\r\n    }\r\n\r\n    signup(user: string | Object, opts?: RequestOptionsArgs): Observable<Response> {\r\n        const fullOpts = getFullOpts(user, opts);\r\n        const url = fullOpts.url ? fullOpts.url : joinUrl(this.config.baseUrl, this.config.signupUrl);\r\n\r\n        return this.http.request(url, getFullOpts(user, fullOpts));\r\n    }\r\n}","import {provide, Provider, Injectable, Injector} from '@angular/core'\r\nimport {Response, RequestOptionsArgs, XHRBackend, RequestOptions} from '@angular/http'\r\nimport {Shared} from './shared';\r\nimport {Local} from './local';\r\nimport {Oauth} from './oauth';\r\nimport {Popup} from './popup';\r\nimport {Oauth2} from './oauth2';\r\nimport {Oauth1} from './oauth1';\r\nimport {Storage} from './storage';\r\nimport {ICustomConfig} from './config';\r\nimport {Config} from './config';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport {JwtHttp} from './jwtHttp';\r\n\r\n/**\r\n * Created by Ron on 17/12/2015.\r\n */\r\nexport function NG2_UI_AUTH_PROVIDERS(config: ICustomConfig): Array<Provider> {\r\n    return [provide(Config, { useFactory: () => { return new Config(config);}}),\r\n            provide(Storage, { useFactory: (providedConfig) => { return new Storage(providedConfig);}, deps: [Config]} ),\r\n            provide(Shared, { useFactory: (storage, providedConfig) => { return new Shared(storage, providedConfig);}, deps: [Storage, Config]} ),\r\n            provide(JwtHttp, { useFactory: (xhrBackend, requestOptions, shared, config, router) => new JwtHttp(xhrBackend, requestOptions, shared, config), deps: [XHRBackend, RequestOptions, Shared, Config]}),\r\n            provide(Oauth, { useFactory: (http, injector, shared, providedConfig) => { return new Oauth(http, injector, shared, providedConfig);}, deps: [JwtHttp, Injector, Shared, Config]} ),\r\n            provide(Popup, { useFactory: (providedConfig) => { return new Popup(providedConfig);}, deps: [Config]} ),\r\n            provide(Oauth1, { useFactory: (http, popup, providedConfig) => { return new Oauth1(http, popup, providedConfig);}, deps: [JwtHttp, Popup, Config]} ),\r\n            provide(Oauth2, { useFactory: (http, popup, storage, providedConfig) => { return new Oauth2(http, popup, storage, providedConfig);}, deps: [JwtHttp, Popup, Storage, Config]} ),\r\n            provide(Local, { useFactory: (http, shared, providedConfig) => { return new Local(http, shared, providedConfig);}, deps: [JwtHttp, Shared, Config]} ),\r\n            provide(Auth, { useFactory: (shared, local, oauth) => { return new Auth(shared, local, oauth);}, deps: [Shared, Local, Oauth]} ),\r\n        ];\r\n}\r\n@Injectable()\r\nexport class Auth {\r\n    constructor(private shared: Shared,\r\n                private local: Local,\r\n                private oauth: Oauth) {}\r\n    login(user, opts?: RequestOptionsArgs): Observable<Response> {\r\n        return this.local.login(user, opts);\r\n    }\r\n    signup(user, opts?: RequestOptionsArgs): Observable<Response>  {\r\n        return this.local.signup(user, opts);\r\n    }\r\n    logout(): Observable<void> {\r\n        return this.shared.logout();\r\n    }\r\n    authenticate(name: string, userData?: any): Observable<Response> {\r\n        return this.oauth.authenticate(name, userData);\r\n    }\r\n    link(name: string, userData?: any): Observable<Response> {\r\n        return this.oauth.authenticate(name, userData);\r\n    }\r\n    unlink(provider: string, opts: RequestOptionsArgs): Observable<Response> {\r\n        return this.oauth.unlink(provider, opts);\r\n    }\r\n    isAuthenticated(): boolean {\r\n        return this.shared.isAuthenticated();\r\n    }\r\n    getToken(): string {\r\n        return this.shared.getToken();\r\n    }\r\n    setToken(token: string): void {\r\n        this.shared.setToken(token);\r\n    }\r\n    removeToken(): void {\r\n        this.shared.removeToken();\r\n    }\r\n    getPayload(): any {\r\n        return this.shared.getPayload();\r\n    }\r\n    setStorageType(type: string): void {\r\n        this.shared.setStorageType(type);\r\n    }\r\n    getExpirationDate(): Date {\r\n        return this.shared.getExpirationDate();\r\n    }\r\n}\r\n","import {Injectable} from '@angular/core';\r\n\r\n/**\r\n * Created by Ron on 17/12/2015.\r\n */\r\n\r\nexport interface IPopupOptions {\r\n    width?: number;\r\n    height?: number;\r\n    left?: number;\r\n    top?: number;\r\n}\r\n\r\nexport interface IOauth1Options {\r\n    url?: string;\r\n    name?: string;\r\n    popupOptions?: IPopupOptions;\r\n    redirectUri?: string;\r\n    authorizationEndpoint?: string;\r\n    type?: string;\r\n}\r\n\r\nexport interface IOauth2Options extends IOauth1Options {\r\n    state?: string| (() => string);\r\n    defaultUrlParams?: string[];\r\n    responseType?: string;\r\n    responseParams?: {\r\n        code?: string;\r\n        clientId?: string;\r\n        redirectUri?: string;\r\n    };\r\n    clientId?: string;\r\n    scopeDelimiter?: string;\r\n    scopePrefix?: string;\r\n\r\n    requiredUrlParams?: string[];\r\n    optionalUrlParams?: string[];\r\n    scope?: string[];\r\n    display?: string;\r\n}\r\nexport interface IProviders {\r\n    [provider: string]: IOauth2Options;\r\n}\r\nexport interface ICustomConfig {\r\n    tokenRoot?: string;\r\n    cordova?: boolean;\r\n    baseUrl?: string;\r\n    loginUrl?: string;\r\n    signupUrl?: string;\r\n    unlinkUrl?: string;\r\n    tokenName?: string;\r\n    tokenSeparator?: string;\r\n    tokenPrefix?: string;\r\n    authToken?: string;\r\n    storageType?: string;\r\n    providers?: IProviders;\r\n    defaultHeaders?: { [name: string]: string };\r\n    withCredentials?: boolean\r\n}\r\n@Injectable()\r\nexport class Config implements ICustomConfig {\r\n    constructor(config?: ICustomConfig) {\r\n        Object.keys(config).forEach((key) => {\r\n            if (key !== 'providers') {\r\n                this[key] = config[key];\r\n            } else {\r\n                Object.keys(config[key]).forEach((provider) => {\r\n                    if (typeof this.providers[provider] === 'undefined') {\r\n                        this.providers[provider] = config.providers[provider];\r\n                    } else {\r\n                        Object.keys(config.providers[provider]).forEach((prop) => {\r\n                            this.providers[provider][prop] = config.providers[provider][prop];\r\n                        });\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n    withCredentials = false;\r\n    tokenRoot = null;\r\n    cordova = false;\r\n    baseUrl = '/';\r\n    loginUrl = '/auth/login';\r\n    signupUrl = '/auth/signup';\r\n    unlinkUrl = '/auth/unlink/';\r\n    tokenName = 'token';\r\n    tokenSeparator = '_';\r\n    tokenPrefix = 'ng2-ui-auth';\r\n    authHeader = 'Authorization';\r\n    authToken = 'Bearer';\r\n    storageType = 'localStorage';\r\n    defaultHeaders = null;\r\n    providers: IProviders = {\r\n        facebook: {\r\n            name: 'facebook',\r\n            url: '/auth/facebook',\r\n            authorizationEndpoint: 'https://www.facebook.com/v2.5/dialog/oauth',\r\n            redirectUri: window.location.origin + '/',\r\n            requiredUrlParams: ['display', 'scope'],\r\n            scope: ['email'],\r\n            scopeDelimiter: ',',\r\n            display: 'popup',\r\n            type: '2.0',\r\n            popupOptions: {width: 580, height: 400}\r\n        },\r\n        google: {\r\n            name: 'google',\r\n            url: '/auth/google',\r\n            authorizationEndpoint: 'https://accounts.google.com/o/oauth2/auth',\r\n            redirectUri: window.location.origin,\r\n            requiredUrlParams: ['scope'],\r\n            optionalUrlParams: ['display'],\r\n            scope: ['profile', 'email'],\r\n            scopePrefix: 'openid',\r\n            scopeDelimiter: ' ',\r\n            display: 'popup',\r\n            type: '2.0',\r\n            popupOptions: {width: 452, height: 633}\r\n        },\r\n        github: {\r\n            name: 'github',\r\n            url: '/auth/github',\r\n            authorizationEndpoint: 'https://github.com/login/oauth/authorize',\r\n            redirectUri: window.location.origin,\r\n            optionalUrlParams: ['scope'],\r\n            scope: ['user:email'],\r\n            scopeDelimiter: ' ',\r\n            type: '2.0',\r\n            popupOptions: {width: 1020, height: 618}\r\n        },\r\n        instagram: {\r\n            name: 'instagram',\r\n            url: '/auth/instagram',\r\n            authorizationEndpoint: 'https://api.instagram.com/oauth/authorize',\r\n            redirectUri: window.location.origin,\r\n            requiredUrlParams: ['scope'],\r\n            scope: ['basic'],\r\n            scopeDelimiter: '+',\r\n            type: '2.0'\r\n        },\r\n        linkedin: {\r\n            name: 'linkedin',\r\n            url: '/auth/linkedin',\r\n            authorizationEndpoint: 'https://www.linkedin.com/uas/oauth2/authorization',\r\n            redirectUri: window.location.origin,\r\n            requiredUrlParams: ['state'],\r\n            scope: ['r_emailaddress'],\r\n            scopeDelimiter: ' ',\r\n            state: 'STATE',\r\n            type: '2.0',\r\n            popupOptions: {width: 527, height: 582}\r\n        },\r\n        twitter: {\r\n            name: 'twitter',\r\n            url: '/auth/twitter',\r\n            authorizationEndpoint: 'https://api.twitter.com/oauth/authenticate',\r\n            redirectUri: window.location.origin,\r\n            type: '1.0',\r\n            popupOptions: {width: 495, height: 645}\r\n        },\r\n        twitch: {\r\n            name: 'twitch',\r\n            url: '/auth/twitch',\r\n            authorizationEndpoint: 'https://api.twitch.tv/kraken/oauth2/authorize',\r\n            redirectUri: window.location.origin,\r\n            requiredUrlParams: ['scope'],\r\n            scope: ['user_read'],\r\n            scopeDelimiter: ' ',\r\n            display: 'popup',\r\n            type: '2.0',\r\n            popupOptions: {width: 500, height: 560}\r\n        },\r\n        live: {\r\n            name: 'live',\r\n            url: '/auth/live',\r\n            authorizationEndpoint: 'https://login.live.com/oauth20_authorize.srf',\r\n            redirectUri: window.location.origin,\r\n            requiredUrlParams: ['display', 'scope'],\r\n            scope: ['wl.emails'],\r\n            scopeDelimiter: ' ',\r\n            display: 'popup',\r\n            type: '2.0',\r\n            popupOptions: {width: 500, height: 560}\r\n        },\r\n        yahoo: {\r\n            name: 'yahoo',\r\n            url: '/auth/yahoo',\r\n            authorizationEndpoint: 'https://api.login.yahoo.com/oauth2/request_auth',\r\n            redirectUri: window.location.origin,\r\n            scope: [],\r\n            scopeDelimiter: ',',\r\n            type: '2.0',\r\n            popupOptions: {width: 559, height: 519}\r\n        },\r\n        bitbucket: {\r\n            name: 'bitbucket',\r\n            url: '/auth/bitbucket',\r\n            authorizationEndpoint: 'https://bitbucket.org/site/oauth2/authorize',\r\n            redirectUri: window.location.origin + '/',\r\n            requiredUrlParams: ['scope'],\r\n            scope: ['email'],\r\n            scopeDelimiter: ',',\r\n            type: '2.0',\r\n            popupOptions: {width: 1028, height: 529}\r\n        }\r\n    };\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {Config} from './config';\r\n\r\n/**\r\n * Created by Ron on 17/12/2015.\r\n */\r\n@Injectable()\r\nexport class Storage {\r\n    private store = {};\r\n    private isStorageAvailable: boolean;\r\n    constructor(private config: Config) {\r\n        this.isStorageAvailable = (() => {\r\n            try {\r\n                let supported = config.storageType in window && window[config.storageType] !== null;\r\n\r\n                if (supported) {\r\n                    let key = Math.random().toString(36).substring(7);\r\n                    (<any>window[this.config.storageType]).setItem(key, '');\r\n                    (<any>window[this.config.storageType]).removeItem(key);\r\n                }\r\n\r\n                return supported;\r\n            } catch (e) {\r\n                return false;\r\n            }\r\n        })();\r\n        if (!this.isStorageAvailable) {\r\n            console.warn(config.storageType + ' is not available.');\r\n        }\r\n    }\r\n    get(key: string) {\r\n        return this.isStorageAvailable ? window[this.config.storageType].getItem(key) : this.store[key];\r\n    }\r\n    set(key: string, value: string) {\r\n        return this.isStorageAvailable ? window[this.config.storageType].setItem(key, value) : this.store[key] = value;\r\n    }\r\n    remove(key: string) {\r\n        return this.isStorageAvailable ? window[this.config.storageType].removeItem(key) : delete this.store[key];\r\n    }\r\n}\r\n","/**\r\n * Created by Ron on 17/12/2015.\r\n */\r\nimport {Observable} from 'rxjs/Observable';\r\nimport {Subscriber} from 'rxjs/Subscriber';\r\nimport {Injectable} from '@angular/core';\r\nimport {Response} from '@angular/http';\r\nimport {Config} from './config';\r\nimport {Storage} from './storage';\r\n/**\r\n * Created by Ron on 17/12/2015.\r\n */\r\n\r\n@Injectable()\r\nexport class Shared {\r\n    tokenName = this.config.tokenPrefix ? [this.config.tokenPrefix, this.config.tokenName].join(this.config.tokenSeparator) : this.config.tokenName;\r\n    constructor(private storage: Storage, private config: Config) {}\r\n    getToken() {\r\n        return this.storage.get(this.tokenName);\r\n    }\r\n    getPayload() {\r\n        let token = this.getToken();\r\n\r\n        if (token && token.split('.').length === 3) {\r\n            try {\r\n                let base64Url = token.split('.')[1];\r\n                let base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\r\n                return JSON.parse(decodeURIComponent(encodeURIComponent(window.atob(base64))));\r\n            } catch (e) {\r\n                return undefined;\r\n            }\r\n        }\r\n    }\r\n    setToken(response: string | Response) {\r\n        if (!response) {\r\n            console.warn('Can\\'t set token without passing a value');\r\n            return;\r\n        }\r\n\r\n        let token: string;\r\n        if (typeof response === 'string') {\r\n            token = response;\r\n        } else {\r\n            let accessToken = response && response.json() && (response.json().access_token || response.json().token);\r\n            let tokenObject: { data: any };\r\n\r\n            if (accessToken) {\r\n                if (typeof accessToken === 'object' && typeof accessToken.data === 'object') {\r\n                    tokenObject = accessToken;\r\n                } else if (typeof accessToken === 'string') {\r\n                    token = accessToken;\r\n                }\r\n            }\r\n\r\n            if (!token && tokenObject) {\r\n                let tokenRootData = this.config.tokenRoot &&\r\n                    this.config.tokenRoot.split('.').reduce(\r\n                        (o, x) => {\r\n                            return o[x];\r\n                        },\r\n                        tokenObject.data);\r\n                token = tokenRootData ? tokenRootData[this.config.tokenName] : tokenObject.data[this.config.tokenName];\r\n            }\r\n\r\n            if (!token) {\r\n                let tokenPath = this.config.tokenRoot ? this.config.tokenRoot + '.' + this.config.tokenName : this.config.tokenName;\r\n                console.warn('Expecting a token named \"' + tokenPath);\r\n                return;\r\n            }\r\n        }\r\n\r\n        this.storage.set(this.tokenName, token);\r\n    }\r\n    removeToken() {\r\n        this.storage.remove(this.tokenName);\r\n    }\r\n    isAuthenticated() {\r\n        let token = this.getToken();\r\n\r\n        // a token is present\r\n        if (token) {\r\n            // token with a valid JWT format XXX.YYY.ZZZ\r\n            if (token.split('.').length === 3) {\r\n                // could be a valid JWT or an access token with the same format\r\n                try {\r\n                    let base64Url = token.split('.')[1];\r\n                    let base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\r\n                    let exp = JSON.parse(window.atob(base64)).exp;\r\n                    // jwt with an optional expiration claims\r\n                    if (exp) {\r\n                        let isExpired = Math.round(new Date().getTime() / 1000) >= exp;\r\n                        if (isExpired) {\r\n                            // fail: Expired token\r\n                            this.storage.remove(this.tokenName);\r\n                            return false;\r\n                        } else {\r\n                            // pass: Non-expired token\r\n                            return true;\r\n                        }\r\n                    }\r\n                } catch (e) {\r\n                    // pass: Non-JWT token that looks like JWT\r\n                    return true;\r\n                }\r\n            }\r\n            // pass: All other tokens\r\n            return true;\r\n        }\r\n        // lail: No token at all\r\n        return false;\r\n    }\r\n    getExpirationDate() {\r\n        let payload = this.getPayload();\r\n        if (payload.exp && Math.round(new Date().getTime() / 1000) < payload.exp) {\r\n            let date = new Date(0);\r\n            date.setUTCSeconds(payload.exp);\r\n            return date;\r\n        }\r\n        return null;\r\n    }\r\n    logout(): Observable<any> {\r\n        this.storage.remove(this.tokenName);\r\n        return Observable.create((observer: Subscriber<any>) => {\r\n            observer.next();\r\n            observer.complete();\r\n        });\r\n    }\r\n    setStorageType(type) {\r\n        this.config.storageType = type;\r\n    }\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport {extend} from './utils';\r\nimport {Config, IPopupOptions} from './config';\r\nimport 'rxjs/add/observable/interval';\r\nimport 'rxjs/add/observable/fromEvent';\r\nimport 'rxjs/add/operator/concatMap';\r\nimport 'rxjs/add/operator/take';\r\nimport 'rxjs/add/operator/takeWhile';\r\n\r\n\r\n/**\r\n * Created by Ron on 17/12/2015.\r\n */\r\n\r\n@Injectable()\r\nexport class Popup {\r\n    url = '';\r\n    popupWindow: Window = null;\r\n\r\n    private static prepareOptions(options: IPopupOptions) {\r\n        options = options || {};\r\n        let width = options.width || 500;\r\n        let height = options.height || 500;\r\n        return extend(\r\n            {\r\n                width: width,\r\n                height: height,\r\n                left: window.screenX + ((window.outerWidth - width) / 2),\r\n                top: window.screenY + ((window.outerHeight - height) / 2.5)\r\n            },\r\n            options);\r\n    }\r\n\r\n    private static stringifyOptions(options: Object) {\r\n        return Object.keys(options).map((key) => {\r\n            return key + '=' + options[key];\r\n        }).join(',');\r\n    }\r\n\r\n    private static parseQueryString(joinedKeyValue: string): any {\r\n        let key, value;\r\n        return joinedKeyValue.split('&').reduce(\r\n            (obj, keyValue) => {\r\n                if (keyValue) {\r\n                    value = keyValue.split('=');\r\n                    key = decodeURIComponent(value[0]);\r\n                    obj[key] = typeof value[1] !== 'undefined' ? decodeURIComponent(value[1]) : true;\r\n                }\r\n                return obj;\r\n            },\r\n            {});\r\n    }\r\n\r\n\r\n    constructor(private config: Config) {}\r\n    open(url: string, name: string, options: IPopupOptions) {\r\n        this.url = url;\r\n\r\n        let stringifiedOptions = Popup.stringifyOptions(Popup.prepareOptions(options));\r\n        let UA = window.navigator.userAgent;\r\n        let windowName = (this.config.cordova || UA.indexOf('CriOS') > -1) ? '_blank' : name;\r\n\r\n        this.popupWindow = window.open(url, windowName, stringifiedOptions);\r\n\r\n        window['popup'] = this.popupWindow;\r\n\r\n        if (this.popupWindow && this.popupWindow.focus) {\r\n            this.popupWindow.focus();\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    eventListener(redirectUri: string) {\r\n        return Observable\r\n            .fromEvent(this.popupWindow, 'loadstart')\r\n            .concatMap((event: Event & { url: string }) => {\r\n                if (!this.popupWindow || this.popupWindow.closed) {\r\n                    return <any>['Popup Window Closed'];\r\n                }\r\n                if (event.url.indexOf(redirectUri) !== 0) {\r\n                    return <any>[];\r\n                }\r\n\r\n                let parser = document.createElement('a');\r\n                parser.href = event.url;\r\n\r\n                if (parser.search || parser.hash) {\r\n                    let queryParams = parser.search.substring(1).replace(/\\/$/, '');\r\n                    let hashParams = parser.hash.substring(1).replace(/\\/$/, '');\r\n                    let hash = Popup.parseQueryString(hashParams);\r\n                    let qs = Popup.parseQueryString(queryParams);\r\n\r\n                    extend(qs, hash);\r\n\r\n                    this.popupWindow.close();\r\n\r\n                    if (qs.error) {\r\n                        throw qs.error;\r\n                    } else {\r\n                        return <any>[qs];\r\n                    }\r\n                }\r\n                return <any>[];\r\n            })\r\n            .take(1)\r\n            .takeWhile((response) => response !== 'Popup Window Closed');\r\n    }\r\n\r\n    pollPopup() {\r\n        return Observable\r\n            .interval(50)\r\n            .concatMap(() => {\r\n                if (!this.popupWindow || this.popupWindow.closed) {\r\n                    return <any>['Popup Window Closed'];\r\n                }\r\n                let documentOrigin = document.location.host;\r\n                let popupWindowOrigin = '';\r\n                try {\r\n                    popupWindowOrigin = this.popupWindow.location.host;\r\n                } catch (error) {\r\n                    // ignore DOMException: Blocked a frame with origin from accessing a cross-origin frame.\r\n                    //error instanceof DOMException && error.name === 'SecurityError'\r\n                }\r\n                if (popupWindowOrigin === documentOrigin && (this.popupWindow.location.search || this.popupWindow.location.hash)) {\r\n                    let queryParams = this.popupWindow.location.search.substring(1).replace(/\\/$/, '');\r\n                    let hashParams = this.popupWindow.location.hash.substring(1).replace(/[\\/$]/, '');\r\n                    let hash = Popup.parseQueryString(hashParams);\r\n                    let qs = Popup.parseQueryString(queryParams);\r\n                    this.popupWindow.close();\r\n                    extend(qs, hash);\r\n                    if (qs.error) {\r\n                        throw qs.error;\r\n                    } else {\r\n                        return <any>[qs];\r\n                    }\r\n                }\r\n                return <any>[];\r\n            })\r\n            .take(1)\r\n            .takeWhile((response) => response !== 'Popup Window Closed');\r\n    }\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {Popup} from './popup';\r\nimport {Http, Response} from '@angular/http';\r\nimport {extend, joinUrl} from './utils';\r\nimport {Config, IOauth1Options} from './config';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport 'rxjs/add/operator/concatMap';\r\n\r\n/**\r\n * Created by Ron on 17/12/2015.\r\n */\r\n\r\n\r\n@Injectable()\r\nexport class Oauth1 {\r\n    private static base: IOauth1Options = {\r\n        url: null,\r\n        name: null,\r\n        popupOptions: null,\r\n        redirectUri: null,\r\n        authorizationEndpoint: null\r\n    };\r\n    private defaults: IOauth1Options;\r\n    constructor(private http: Http, private popup: Popup, private config: Config) {}\r\n    open(options?: IOauth1Options, userData?: any): Observable<Response> {\r\n        this.defaults = extend(options, Oauth1.base);\r\n        let popupWindow;\r\n        let serverUrl = this.config.baseUrl ? joinUrl(this.config.baseUrl, this.defaults.url) : this.defaults.url;\r\n\r\n        if (!this.config.cordova) {\r\n            popupWindow = this.popup.open('', this.defaults.name, this.defaults.popupOptions/*, this.defaults.redirectUri*/);\r\n        }\r\n\r\n        return this.http.post(serverUrl, JSON.stringify(this.defaults))\r\n            .concatMap((response: Response) => {\r\n                if (this.config.cordova) {\r\n                    popupWindow = this.popup.open(\r\n                        [this.defaults.authorizationEndpoint, this.buildQueryString(response.json())].join('?'),\r\n                        this.defaults.name,\r\n                        this.defaults.popupOptions/*, this.defaults.redirectUri*/);\r\n                } else {\r\n                    popupWindow.popupWindow.location =\r\n                        [this.defaults.authorizationEndpoint, this.buildQueryString(response.json())].join('?');\r\n                }\r\n\r\n                return this.config.cordova ? popupWindow.eventListener(this.defaults.redirectUri) : popupWindow.pollPopup();\r\n            })\r\n            .concatMap((response) => {\r\n                return this.exchangeForToken(response, userData);\r\n            });\r\n    }\r\n    private exchangeForToken(oauthData, userData?: any) {\r\n        let data = extend({}, userData);\r\n        extend(data, oauthData);\r\n        let exchangeForTokenUrl = this.config.baseUrl ? joinUrl(this.config.baseUrl, this.defaults.url) : this.defaults.url;\r\n        return this.http.post(exchangeForTokenUrl, data, { withCredentials: this.config.withCredentials });\r\n    }\r\n    private buildQueryString(obj: Object) {\r\n        return Object.keys(obj).map((key) => {\r\n            return encodeURIComponent(key) + '=' + encodeURIComponent(obj[key]);\r\n        }).join('&');\r\n    }\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {Http} from '@angular/http';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport {extend, joinUrl, merge, camelCase} from './utils';\r\nimport {Config, IOauth2Options} from './config';\r\nimport {Popup} from './popup';\r\nimport {Storage} from './storage';\r\nimport 'rxjs/add/operator/concatMap';\r\n\r\n/**\r\n * Created by Ron on 17/12/2015.\r\n */\r\n\r\n\r\n@Injectable()\r\nexport class Oauth2 {\r\n    private static base: IOauth2Options = {\r\n        defaultUrlParams: ['response_type', 'client_id', 'redirect_uri'],\r\n        responseType: 'code',\r\n        responseParams: {\r\n            code: 'code',\r\n            clientId: 'clientId',\r\n            redirectUri: 'redirectUri'\r\n        }\r\n    };\r\n\r\n    private defaults: IOauth2Options;\r\n\r\n    constructor(private http: Http,\r\n                private popup: Popup,\r\n                private storage: Storage,\r\n                private config: Config) {\r\n    }\r\n\r\n    open(options: IOauth2Options, userData?: any) {\r\n        this.defaults = merge(options, Oauth2.base);\r\n\r\n        let url;\r\n        let openPopup: Observable<any>;\r\n        let stateName = this.defaults.name + '_state';\r\n        let state = this.defaults.state;\r\n        if (typeof state === 'string') {\r\n            this.storage.set(stateName, state);\r\n        } else if (typeof state === 'function') {\r\n            this.storage.set(stateName, state());\r\n        }\r\n\r\n        url = [this.defaults.authorizationEndpoint, this.buildQueryString()].join('?');\r\n\r\n        if (this.config.cordova) {\r\n            openPopup = this.popup\r\n                .open(url, this.defaults.name, this.defaults.popupOptions/*, this.defaults.redirectUri*/)\r\n                .eventListener(this.defaults.redirectUri);\r\n        } else {\r\n            openPopup = this.popup\r\n                .open(url, this.defaults.name, this.defaults.popupOptions/*, this.defaults.redirectUri*/)\r\n                .pollPopup();\r\n        }\r\n\r\n        return openPopup\r\n            .concatMap((oauthData) => {\r\n                // when no server URL provided, return popup params as-is.\r\n                // this is for a scenario when someone wishes to opt out from\r\n                // satellizer's magic by doing authorization code exchange and\r\n                // saving a token manually.\r\n                if (this.defaults.responseType === 'token' || !this.defaults.url) {\r\n                    return oauthData;\r\n                }\r\n\r\n                if (oauthData.state && oauthData.state !== this.storage.get(stateName)) {\r\n                    throw 'OAuth \"state\" mismatch';\r\n                }\r\n\r\n                return this.exchangeForToken(oauthData, userData);\r\n            });\r\n    }\r\n\r\n    private exchangeForToken(oauthData: {code?, state?}, userData?: {}) {\r\n        let data: any = extend({}, userData);\r\n        Object.keys(this.defaults.responseParams).forEach((key) => {\r\n            switch (key) {\r\n                case 'code':\r\n                    data[this.defaults.responseParams[key]] = oauthData.code;\r\n                    break;\r\n                case 'clientId':\r\n                    data[this.defaults.responseParams[key]] = this.defaults.clientId;\r\n                    break;\r\n                case 'redirectUri':\r\n                    data[this.defaults.responseParams[key]] = this.defaults.redirectUri;\r\n                    break;\r\n                default:\r\n                    data[this.defaults.responseParams[key]] = oauthData[key];\r\n            }\r\n        });\r\n\r\n        if (oauthData.state) {\r\n            data.state = oauthData.state;\r\n        }\r\n\r\n        let exchangeForTokenUrl = this.config.baseUrl ? joinUrl(this.config.baseUrl, this.defaults.url) : this.defaults.url;\r\n\r\n        return this.http.post(exchangeForTokenUrl,  JSON.stringify(data), { withCredentials: this.config.withCredentials });\r\n    }\r\n\r\n    private buildQueryString() {\r\n        let keyValuePairs: string[][] = [];\r\n        let urlParams = ['defaultUrlParams', 'requiredUrlParams', 'optionalUrlParams'];\r\n\r\n        urlParams.forEach((params) => {\r\n            if (this.defaults[params]) {\r\n                (<string[]>this.defaults[params]).forEach((paramName) => {\r\n                    let camelizedName = camelCase(paramName);\r\n                    let paramValue = typeof this.defaults[paramName] === 'function' ?\r\n                        this.defaults[paramName]() :\r\n                        this.defaults[camelizedName];\r\n\r\n                    if (paramName === 'state') {\r\n                        let stateName = this.defaults.name + '_state';\r\n                        paramValue = encodeURIComponent(this.storage.get(stateName));\r\n                    }\r\n\r\n                    if (paramName === 'scope' && Array.isArray(paramValue)) {\r\n                        paramValue = paramValue.join(this.defaults.scopeDelimiter);\r\n\r\n                        if (this.defaults.scopePrefix) {\r\n                            paramValue = [this.defaults.scopePrefix, paramValue].join(this.defaults.scopeDelimiter);\r\n                        }\r\n                    }\r\n\r\n                    keyValuePairs.push([paramName, paramValue]);\r\n                });\r\n            }\r\n        });\r\n\r\n        return keyValuePairs.map(function(pair) {\r\n            return pair.join('=');\r\n        }).join('&');\r\n    }\r\n}\r\n","import {Injectable, Injector} from '@angular/core';\r\nimport {Oauth1} from './oauth1';\r\nimport {Oauth2} from './oauth2';\r\nimport {Shared} from './shared';\r\nimport {Http, Response, RequestOptionsArgs} from '@angular/http';\r\nimport {joinUrl} from './utils';\r\nimport {Config} from './config';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport 'rxjs/add/operator/do';\r\n\r\n/**\r\n * Created by Ron on 17/12/2015.\r\n */\r\n\r\n@Injectable()\r\nexport class Oauth {\r\n    constructor(private http: Http,\r\n                private injector: Injector,\r\n                private shared: Shared,\r\n                private config: Config) {}\r\n    authenticate(name: string, userData?: any): Observable<Response> {\r\n        // var injector = Injector.resolveAndCreate([Oauth1, Oauth2]);\r\n        let provider: Oauth1 | Oauth2 = this.config.providers[name].type === '1.0' ? this.injector.get(Oauth1) : this.injector.get(Oauth2);\r\n        return provider.open(this.config.providers[name], userData || {})\r\n            .do((response: Response) => {\r\n                // this is for a scenario when someone wishes to opt out from\r\n                // satellizer's magic by doing authorization code exchange and\r\n                // saving a token manually.\r\n                if (this.config.providers[name].url) {\r\n                    this.shared.setToken(response);\r\n                }\r\n            });\r\n    }\r\n    unlink(provider: string, opts: RequestOptionsArgs) {\r\n        opts = opts || {};\r\n        let url = opts.url ? opts.url : joinUrl(this.config.baseUrl, this.config.unlinkUrl);\r\n        opts.body = JSON.stringify({ provider: provider }) || opts.body;\r\n        opts.method = opts.method || 'POST';\r\n        \r\n        return this.http.request(url, opts);\r\n    }\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {\r\n    Http,\r\n    RequestMethod,\r\n    Response,\r\n    RequestOptionsArgs,\r\n    Headers,\r\n    Request,\r\n    RequestOptions,\r\n    ConnectionBackend\r\n} from '@angular/http';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport {Config} from './config';\r\nimport {Shared} from './shared';\r\n/**\r\n * Created by Ron on 06/01/2016.\r\n */\r\n\r\n@Injectable()\r\nexport class JwtHttp extends Http {\r\n    constructor(_backend: ConnectionBackend,\r\n                _defaultOptions: RequestOptions,\r\n                private _shared: Shared,\r\n                private _config: Config) {\r\n        super(_backend, _defaultOptions);\r\n    }\r\n\r\n    request(url: string | Request, options?: RequestOptionsArgs): Observable<Response> {\r\n        if (url instanceof Request) {\r\n            url.headers = url.headers || new Headers();\r\n            this.setHeaders(url);\r\n        } else {\r\n            options = options || {};\r\n            this.setHeaders(options);\r\n        }\r\n        return super.request(url, options);\r\n    }\r\n\r\n    get(url: string, options?: RequestOptionsArgs): Observable<Response> {\r\n        options = options || {};\r\n        options.method = RequestMethod.Get;\r\n        return this.request(url, options);\r\n    }\r\n\r\n    post(url: string, body: string, options?: RequestOptionsArgs): Observable<Response> {\r\n        options = options || {};\r\n        options.method = RequestMethod.Post;\r\n        options.body = body;\r\n        return this.request(url, options);\r\n    }\r\n\r\n    put(url: string, body: string, options?: RequestOptionsArgs): Observable<Response> {\r\n        options = options || {};\r\n        options.method = RequestMethod.Put;\r\n        options.body = body;\r\n        return this.request(url, options);\r\n    }\r\n\r\n    delete(url: string, options?: RequestOptionsArgs): Observable<Response> {\r\n        options = options || {};\r\n        options.method = RequestMethod.Delete;\r\n        return this.request(url, options);\r\n    }\r\n\r\n    patch(url: string, body: string, options?: RequestOptionsArgs): Observable<Response> {\r\n        options = options || {};\r\n        options.method = RequestMethod.Patch;\r\n        options.body = body;\r\n        return this.request(url, options);\r\n    }\r\n\r\n    head(url: string, options?: RequestOptionsArgs): Observable<Response> {\r\n        options = options || {};\r\n        options.method = RequestMethod.Head;\r\n        return this.request(url, options);\r\n    }\r\n\r\n    private setHeaders(obj: { headers?: Headers, [index: string]: any }) {\r\n        obj.headers = obj.headers || new Headers();\r\n        if (this._config.defaultHeaders) {\r\n            Object.keys(this._config.defaultHeaders).forEach((defaultHeader) => {\r\n                if (!obj.headers.has(defaultHeader)) {\r\n                    obj.headers.set(defaultHeader, this._config.defaultHeaders[defaultHeader]);\r\n                }\r\n            });\r\n        }\r\n        if (this._shared.isAuthenticated()) {\r\n            obj.headers.set(this._config.authHeader, this._config.authToken + ' ' + this._shared.getToken());\r\n        }\r\n    }\r\n}\r\n"],"names":["__extends","d","b","__","this","constructor","p","hasOwnProperty","prototype","Object","create","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","__metadata","k","v","metadata","dst","src","keys","forEach","baseUrl","url","test","joined","join","normalize","str","replace","obj1","obj2","result","merge","name","_","separator","letter","offset","toUpperCase","user","userOpts","opts","body","JSON","stringify","method","config","provide","Config","useFactory","Storage","providedConfig","deps","Shared","storage","JwtHttp","xhrBackend","requestOptions","shared","router","XHRBackend","RequestOptions","Oauth","http","injector","Injector","Popup","Oauth1","popup","Oauth2","Local","Auth","local","oauth","facebook","authorizationEndpoint","redirectUri","window","location","origin","requiredUrlParams","scope","scopeDelimiter","display","type","popupOptions","width","height","google","optionalUrlParams","scopePrefix","github","instagram","linkedin","state","twitter","twitch","live","yahoo","bitbucket","_this","provider","providers","prop","Injectable","isStorageAvailable","supported","storageType","Math","random","toString","substring","setItem","removeItem","e","console","warn","getItem","store","value","tokenPrefix","tokenName","tokenSeparator","get","token","getToken","split","base64Url","base64","parse","decodeURIComponent","encodeURIComponent","atob","response","accessToken","json","access_token","tokenObject","data","tokenRootData","tokenRoot","reduce","o","x","tokenPath","set","remove","exp","isExpired","round","Date","getTime","payload","getPayload","date","setUTCSeconds","Observable","observer","next","complete","fullOpts","getFullOpts","joinUrl","loginUrl","request","setToken","signupUrl","options","extend","left","screenX","outerWidth","top","screenY","outerHeight","map","joinedKeyValue","obj","keyValue","stringifiedOptions","stringifyOptions","prepareOptions","UA","navigator","userAgent","windowName","cordova","indexOf","popupWindow","open","focus","fromEvent","concatMap","event","closed","parser","document","createElement","href","search","hash","queryParams","hashParams","parseQueryString","qs","close","error","take","takeWhile","interval","documentOrigin","host","popupWindowOrigin","userData","defaults","base","serverUrl","post","buildQueryString","eventListener","pollPopup","exchangeForToken","oauthData","exchangeForTokenUrl","withCredentials","openPopup","stateName","responseType","responseParams","code","clientId","keyValuePairs","urlParams","params","paramName","camelizedName","camelCase","paramValue","Array","isArray","push","pair","defaultUrlParams","unlinkUrl","_backend","_defaultOptions","_shared","_config","_super","Request","headers","Headers","setHeaders","RequestMethod","Get","Post","Put","Delete","Patch","Head","defaultHeaders","defaultHeader","has","isAuthenticated","authHeader","authToken","Http","login","signup","logout","authenticate","unlink","removeToken","setStorageType","getExpirationDate"],"mappings":"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"}